<html>
<head>
<title>Langsmith Languages</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<style type="text/css">
<!--
body {  font-family: Arial, Helvetica, sans-serif; font-size: 9pt}
td { font-family: Arial, Helvetica, sans-serif; font-size: 9pt}
.row-header {  background-color: #F0F0F0}
a:link {  color: #000080; text-decoration: none}
a:visited { color: #000080; text-decoration: none }
a:hover {  text-decoration: underline}
.row-body {  padding-top: .5em; padding-bottom: .5em; font-size: 8pt}
-->
</style>
</head>
<body bgcolor="#FFFFFF" text="#333333" leftmargin="5" topmargin="5" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td><b>Languages by people in langsmiths@yahoogroups.com</b></td>
    <td align="right"><b>Last Modified: 11/12/2003, Mike Austin</b></td>
  </tr>
</table>
<br>
<table width="100%" border="0" cellspacing="0" cellpadding="3">
  <tr bgcolor="#666666"> 
    <td>&nbsp;</td>
    <td><b><font color="#FFFFFF">Language&nbsp;&nbsp;&nbsp;</font></b></td>
    <td align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td><b><font color="#FFFFFF">Developers</font></b></td>
    <td align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td><b><font color="#FFFFFF">Status</font></b></td>
    <td align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td><b><font color="#FFFFFF">Version</font></b></td>
    <td align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td><b><font color="#FFFFFF">Links</font></b></td>
    <td><b><font color="#FFFFFF">&nbsp;</font></b></td>
  </tr>
  <tr> 
    <td class="row-header">&nbsp;</td>
    <td class="row-header"><b>Caper</b></td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Paul Chapman</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Active / ?</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">&nbsp;</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header"><a href="http://www.igblan.free-online.co.uk/igblan/caper/">Home 
      Page</a></td>
    <td class="row-header">&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="7" class="row-body">I enjoy researching Conway's Game of Life. 
      Last year I identified a need in the Life community for a programmable editor 
      for Life (and other CA) patterns. I dubbed the project Caper (CA Programmable 
      Editor). The Caper editor needs a programming language, the Caper PL, or 
      simply Caper where there is no confusion.</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td class="row-header">&nbsp;</td>
    <td class="row-header"><b>Cleet</b></td>
    <td class="row-header" align="right">&nbsp;</td>
    <td class="row-header">Steve Folta</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Active / Prototype</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">&nbsp;</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header"><a href="http://somefancy.com/cleet/">Home Page</a></td>
    <td class="row-header">&nbsp;</td>
  </tr>
  <tr> 
    <td class="row-body">&nbsp;</td>
    <td class="row-body">&nbsp;</td>
    <td class="row-body" align="right">&nbsp;</td>
    <td class="row-body" colspan="7">Cleet is an object-oriented language for 
      programming applications. It is *not* a scripting language -- programs in 
      Cleet compile down to machine code. Cleet's object model and syntax are 
      simpler and cleaner than other such languages (such as C++, Java, D, C#, 
      etc.). Objects are garbage-collected.</td>
    <td class="row-body">&nbsp;</td>
  </tr>
  <tr> 
    <td class="row-header">&nbsp;</td>
    <td class="row-header"><b>Inertia</b></td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Mike Austin</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Active / Prototype</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">&nbsp;</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header"><a href="http://www.mike-austin.com/home/projects/inertia">Home 
      Page</a><br>
    </td>
    <td class="row-header">&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center" valign="middle">&nbsp;</td>
    <td> 
      <p><br>
        <br>
        <br>
      </p>
    </td>
    <td colspan="7" class="row-body"> 
      <p>The goal of inertia is to borrow ideas and syntax from many languages, 
        then refactor and simplify. It will be a high level object / functional 
        language based solely on messages and block closures with a syntax between 
        Python and Smalltalk. By using basics such as predicate-dispatching and 
        continuations, higher level functionality can be supported such as multi-methods, 
        continuations, and co-routines.</p>
    </td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td class="row-header">&nbsp;</td>
    <td class="row-header"><b>Io</b></td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Steve Dekorte</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Active / Late Beta</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">&nbsp;</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header"><a href="http://www.iolanguage.com">Home Page</a></td>
    <td class="row-header">&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center" valign="middle"><img src="io-lang.gif" width="40" height="32"></td>
    <td> 
      <p><br>
        <br>
        <br>
      </p>
    </td>
    <td colspan="7" class="row-body">Io is small prototype-based programming language. 
      The ideas in Io are mostly inspired by Smalltalk (all values are objects), 
      Act1, Self and NewtonScript (prototype-based differential inheritance, actors 
      for concurrency), LISP (code is a runtime inspectable/modifiable tree) and 
      Lua (small, embeddable).</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td class="row-header">&nbsp;</td>
    <td class="row-header"><b>LANG/BGB</b></td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">&nbsp;</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Active</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">&nbsp;</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header"><a href="http://bgb-sys.sourceforge.net/">Home Page</a></td>
    <td class="row-header">&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center" valign="middle"><img src="bgb-lang.gif" width="43" height="32"></td>
    <td><br>
      <br>
      <br>
    </td>
    <td colspan="7" class="row-body">Several vaguely related projects worked on 
      by me, including: an interpreter system (for a language of mine) including: 
      a zooming gui, persistence, limited distributed processing, persistent links, 
      3d stuff, simple physics engine, ... an os kernel; ...</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td class="row-header">&nbsp;</td>
    <td class="row-header"><b>Onyx</b></td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Jason Evans</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Active / Stable</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">4.4.3</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header"><a href="http://www.canonware.com/">Home Page</a></td>
    <td class="row-header">&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
    <td colspan="7" class="row-body">Onyx is a powerful stack-based, multi-threaded, 
      interpreted, general purpose programming language similar to PostScript 
      and Forth. It can be embedded as an extension language similarly to ficl 
      (Forth), guile (scheme), librep (lisp dialect), s-lang, Lua, and Tcl.</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td class="row-header">&nbsp;</td>
    <td class="row-header"><b>Slate</b></td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Brian T. Rice</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Active / Prototype</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">0.1</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header"><a href="http://slate.tunes.org/">Home Page</a></td>
    <td class="row-header">&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td><br>
      <br>
      <br>
    </td>
    <td colspan="7" class="row-body">Slate is a prototype-based object-oriented 
      programming language based on Self, CLOS, and Smalltalk. Slate syntax is 
      intended to be as familiar as possible to a Smalltalker, rather than engaging 
      in divergent experiments in that respect. Unlike the Smalltalk family, within 
      Slate, methods can be assigned to a signature of objects, instead of being 
      installed on one favored receiver.</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td class="row-header">&nbsp;</td>
    <td class="row-header"><b>Squirrel</b></td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Alberto Demichelis</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Active / ?</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">&nbsp;</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header"><a href="http://squirrel.sourceforge.net/">Home Page</a></td>
    <td class="row-header">&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td><br>
      <br>
      <br>
    </td>
    <td colspan="7" class="row-body">Squirrel is a high level imperative/OO programming 
      language, designed to be a powerful scripting tool that fits in the size, 
      memory bandwidth, and real-time requirements of applications like games. 
      Squirrel is inspired by languages like Python,Javascript and expecially 
      LUA(The API is very similar and the table code is based on the LUA one).</td>
    <td>&nbsp;</td>
  </tr>
<tr> 
    <td class="row-header">&nbsp;</td>
    <td class="row-header"><b>VEND</b></td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Max Battcher</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Active / Prototype</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">&nbsp;</td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header"><a href="http://www.worldmaker.net/tavi/index.php?page=WorldMaker.Lang.Vend">Home 
      Page</a></td>
    <td class="row-header">&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td><br>
      <br>
      <br>
    </td>
    <td colspan="7" class="row-body" valign="top">VEND began as something of a 
      thought experiment inside a highly minimalistic language experiment (TORG/XTORG). 
      The idea was to use English word &quot;familiarity&quot; to best effect 
      in an object oriented (prototype-based) language. It seems that what I have 
      come up with is something like a true OO BASIC the roundabout way. The goal 
      of the project has then progressed to become an &quot;easy to read&quot; 
      English-looking OO language.</td>
    <td>&nbsp;</td>
  </tr>
  <tr> 
    <td class="row-header">&nbsp;</td>
    <td class="row-header"><b>WO</b></td>
    <td class="row-header" align="right"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Vincent Belliard</td>
    <td align="right" class="row-header"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">Active / ?</td>
    <td align="right" class="row-header"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header">&nbsp;</td>
    <td align="right" class="row-header"><img src="header-div.gif" width="1" height="16"></td>
    <td class="row-header"><a href="http://www.openwo.org/">Home Page</a></td>
    <td class="row-header">&nbsp;</td>
  </tr>
  <tr> 
    <td>&nbsp;</td>
    <td align="center" valign="middle"><img src="wo-lang.gif" width="42" height="32"></td>
    <td>&nbsp;</td>
    <td colspan="7" class="row-body">The WO is an entirely dynamic language. Everything 
      that can be made at compilation time can be made at run time. It is possible 
      to create classes and methods dynamically. These methods can be compiled 
      then to get the same performances of a method defined at compilation time. 
      It is also possible to add an element to a class under execution. The objects 
      already allocated are then automatically updated.<br>
    </td>
    <td>&nbsp;</td>
  </tr>
  <tr bgcolor="#000000"> 
    <td height="2" bgcolor="#666666"></td>
    <td height="2" bgcolor="#666666"></td>
    <td height="2" bgcolor="#666666"></td>
    <td colspan="7" height="2" bgcolor="#666666"></td>
    <td height="2" bgcolor="#666666"></td>
  </tr>
</table>
</body>
</html>
